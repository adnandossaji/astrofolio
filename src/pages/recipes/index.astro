---
import Layout from '../../layouts/Layout.astro';
import RecipeCard from '../../components/RecipeCard.astro';
import { getAllRecipes } from '../../lib/recipes';

const recipes = await getAllRecipes();
// Get unique difficulties
const difficulties = [...new Set(recipes.map(recipe => recipe.data.difficulty))];
// Get unique tags
const allTags = [...new Set(recipes.flatMap(recipe => recipe.data.tags))];
---

<Layout>
    <div class="container">
        <header class="page-header">
            <h1>All Recipes</h1>
            <p>Browse our collection of delicious recipes</p>
        </header>

        <div class="filter-section">
            <div class="search-box">
                <input 
                    type="text" 
                    id="search-input" 
                    placeholder="Search recipes..." 
                    aria-label="Search recipes"
                />
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </div>

            <div class="filters">
                <div class="filter-group">
                    <label for="difficulty-filter">Difficulty:</label>
                    <select id="difficulty-filter">
                        <option value="">All Difficulties</option>
                        {difficulties.map(difficulty => (
                            <option value={difficulty}>{difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}</option>
                        ))}
                    </select>
                </div>

                <div class="filter-group">
                    <label for="tag-filter">Tag:</label>
                    <select id="tag-filter">
                        <option value="">All Tags</option>
                        {allTags.map(tag => (
                            <option value={tag}>{tag.charAt(0).toUpperCase() + tag.slice(1)}</option>
                        ))}
                    </select>
                </div>
            </div>
        </div>

        <div class="tag-chips">
            <button class="tag-chip active" data-tag="">All</button>
            {allTags.map(tag => (
                <button class="tag-chip" data-tag={tag}>
                    {tag.charAt(0).toUpperCase() + tag.slice(1)}
                </button>
            ))}
        </div>

        <div id="recipes-grid" class="recipes-grid">
            {recipes.map(recipe => (
                <div class="recipe-item" 
                    data-title={recipe.data.title.toLowerCase()}
                    data-description={recipe.data.description.toLowerCase()}
                    data-difficulty={recipe.data.difficulty}
                    data-tags={recipe.data.tags.join(',')}
                >
                    <RecipeCard recipe={recipe} />
                </div>
            ))}
        </div>

        <div id="no-results" class="no-results hidden">
            <p>No recipes found matching your search criteria.</p>
            <button id="reset-filters" class="btn">Reset Filters</button>
        </div>
    </div>
</Layout>

<script>
    // DOM elements
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const difficultyFilter = document.getElementById('difficulty-filter') as HTMLSelectElement;
    const tagFilter = document.getElementById('tag-filter') as HTMLSelectElement;
    const recipeItems = document.querySelectorAll('.recipe-item');
    const noResults = document.getElementById('no-results');
    const resetButton = document.getElementById('reset-filters');
    const recipesGrid = document.getElementById('recipes-grid');
    const tagChips = document.querySelectorAll('.tag-chip');

    // Filter recipes based on current filter values
    function filterRecipes() {
        const searchTerm = searchInput.value.toLowerCase().trim();
        const selectedDifficulty = difficultyFilter.value;
        const selectedTag = tagFilter.value;
        
        let visibleCount = 0;
        
        recipeItems.forEach(item => {
            const recipeItem = item as HTMLElement;
            const title = recipeItem.dataset.title;
            const description = recipeItem.dataset.description;
            const difficulty = recipeItem.dataset.difficulty;
            const tags = recipeItem.dataset.tags?.split(',') || [];
            
            // Apply filters
            const matchesSearch = !searchTerm || 
                title?.includes(searchTerm) || 
                description?.includes(searchTerm);
                
            const matchesDifficulty = !selectedDifficulty || 
                difficulty === selectedDifficulty;
                
            const matchesTag = !selectedTag || 
                tags.includes(selectedTag);
            
            // Show or hide based on all filters
            const shouldShow = matchesSearch && matchesDifficulty && matchesTag;
            
            recipeItem.style.display = shouldShow ? 'block' : 'none';
            
            if (shouldShow) {
                visibleCount++;
            }
        });
        
        // Show/hide no results message
        if (visibleCount === 0 && noResults && recipesGrid) {
            noResults.classList.remove('hidden');
            recipesGrid.classList.add('hidden');
        } else if (noResults && recipesGrid) {
            noResults.classList.add('hidden');
            recipesGrid.classList.remove('hidden');
        }
    }
    
    // Add event listeners
    if (searchInput) {
        searchInput.addEventListener('input', filterRecipes);
    }
    
    if (difficultyFilter) {
        difficultyFilter.addEventListener('change', filterRecipes);
    }
    
    if (tagFilter) {
        tagFilter.addEventListener('change', filterRecipes);
    }
    
    // Reset filters
    if (resetButton) {
        resetButton.addEventListener('click', () => {
            if (searchInput) searchInput.value = '';
            if (difficultyFilter) difficultyFilter.value = '';
            if (tagFilter) tagFilter.value = '';
            
            // Reset tag chips
            tagChips.forEach(chip => {
                chip.classList.remove('active');
                if (chip.getAttribute('data-tag') === '') {
                    chip.classList.add('active');
                }
            });
            
            filterRecipes();
        });
    }
    
    // Tag chips functionality
    tagChips.forEach(chip => {
        chip.addEventListener('click', () => {
            // Update UI
            tagChips.forEach(c => c.classList.remove('active'));
            chip.classList.add('active');
            
            // Update filter and trigger filtering
            const selectedTag = chip.getAttribute('data-tag') || '';
            if (tagFilter) {
                tagFilter.value = selectedTag;
                filterRecipes();
            }
        });
    });
</script>

<style>
    .page-header {
        text-align: center;
        margin: 2rem 0 3rem;
    }
    
    h1 {
        font-size: 2.5rem;
        margin-bottom: 0.5rem;
    }
    
    .page-header p {
        color: #666;
        font-size: 1.1rem;
    }
    
    .filter-section {
        margin-bottom: 1.5rem;
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        align-items: center;
        justify-content: space-between;
    }
    
    .search-box {
        position: relative;
        flex: 1;
        min-width: 250px;
        max-width: 500px;
    }
    
    .search-box input {
        width: 100%;
        padding: 0.8rem 1rem 0.8rem 2.5rem;
        border: 1px solid #ddd;
        border-radius: 50px;
        font-size: 1rem;
        transition: border-color 0.3s, box-shadow 0.3s;
        font-family: var(--font-body);
    }
    
    .search-box input:focus {
        outline: none;
        border-color: var(--color-primary);
        box-shadow: 0 0 0 2px rgba(255, 107, 107, 0.2);
    }
    
    .search-box svg {
        position: absolute;
        left: 0.8rem;
        top: 50%;
        transform: translateY(-50%);
        color: #888;
    }
    
    .filters {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }
    
    .filter-group {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    
    .filter-group label {
        font-weight: 500;
        font-size: 0.95rem;
    }
    
    .filter-group select {
        padding: 0.6rem 1rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: white;
        font-family: var(--font-body);
        font-size: 0.95rem;
        cursor: pointer;
        min-width: 150px;
    }
    
    .filter-group select:focus {
        outline: none;
        border-color: var(--color-primary);
    }
    
    .tag-chips {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-bottom: 2.5rem;
    }
    
    .tag-chip {
        background: transparent;
        border: 1px solid var(--color-primary);
        color: var(--color-primary);
        padding: 0.5rem 1rem;
        border-radius: 50px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        font-family: var(--font-body);
    }
    
    .tag-chip:hover {
        background-color: rgba(255, 107, 107, 0.1);
    }
    
    .tag-chip.active {
        background-color: var(--color-primary);
        color: white;
    }
    
    .recipes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 2rem;
        margin-bottom: 4rem;
    }
    
    .recipe-item {
        transition: transform 0.3s;
    }
    
    .no-results {
        text-align: center;
        padding: 3rem 0;
    }
    
    .no-results p {
        margin-bottom: 1.5rem;
        font-size: 1.1rem;
        color: #666;
    }
    
    .btn {
        background-color: var(--color-primary);
        color: white;
        border: none;
        padding: 0.7rem 1.5rem;
        border-radius: 50px;
        font-weight: 500;
        cursor: pointer;
        font-family: var(--font-body);
        transition: background-color 0.3s, transform 0.2s;
    }
    
    .btn:hover {
        background-color: #ff5252;
        transform: translateY(-2px);
    }
    
    .hidden {
        display: none;
    }
    
    @media (max-width: 768px) {
        .filter-section {
            flex-direction: column;
            align-items: stretch;
            gap: 1.2rem;
        }
        
        .search-box {
            max-width: 100%;
        }
        
        .filters {
            justify-content: space-between;
        }
        
        .recipes-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }
    }
</style> 